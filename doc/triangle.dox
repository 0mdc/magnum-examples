/*
    This file is part of Magnum.

    Copyright © 2010, 2011, 2012, 2013 Vladimír Vondruš <mosra@centrum.cz>

    Permission is hereby granted, free of charge, to any person obtaining a
    copy of this software and associated documentation files (the "Software"),
    to deal in the Software without restriction, including without limitation
    the rights to use, copy, modify, merge, publish, distribute, sublicense,
    and/or sell copies of the Software, and to permit persons to whom the
    Software is furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
    THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
    DEALINGS IN THE SOFTWARE.
*/

namespace Magnum {
/** @page examples-triangle Your first triangle
@brief Basic rendering with builtin shaders.

- Next example: @ref examples-textured-triangle

@image html triangle/triangle.png
@image latex triangle/triangle.png

@tableofcontents
@section examples-triangle-context Setting up, preparing the mesh and shader

For the first example we will use the simple GLUT toolkit, which is available
on most platforms. It is implemented in Platform::GlutApplication class. We
subclass it and next to the constructor we implement two required functions,
one which is called after the window is resized and one for rendering into the
window. We also need mesh encapsulating our triangle, buffer to store vertex
data and shader which will take care of rendering.
@dontinclude triangle/TriangleExample.cpp
@skip class TriangleExample
@until };

In the constructor we pass necessary arguments to
@ref Platform::GlutApplication "GlutApplication" class.
@skipline TriangleExample::TriangleExample

Now we specify vertex attributes, consisting of positions and colors. For
performance reasons it is common to interleave them, so data for each vertex
are in one continuous place in memory. We will cheat a bit here and use
three-component vectors for both 3D positions and RGB colors, so we can
interleave them easily in place. In the following tutorials we will learn how
to interleave them programatically.
@skip data
@until };

We then create vertex buffer and fill it with the data. The data won't be
changed or read back into memory during application lifetime, so we mark them
with appropriate @ref Buffer::Usage "buffer usage".
@skip Buffer
@until setData

Now we configure the mesh - we specify @ref Mesh::Primitive "mesh primitive"
and vertex count, add vertex buffer and specify attribute locations for use
with the shader. We specify our attributes in the same order as physical
location of vertex attributes in the buffer - zero offset from the beginning,
first the position, then the color.
@skip mesh.
@until }

Function `viewportEvent()` just passes current window size to the framebuffer,
so the triangle is rendered at proper size and position.
@skip TriangleExample::viewportEvent
@until }
@until }

Function `drawEvent()` will take care about drawing the scene. We will draw to
the default framebuffer, clear its color buffer, tell that the drawing is done
using our shader and then we draw the mesh. The context is double buffered, so
we need to swap the buffers after drawing.
@skip TriangleExample::drawEvent
@until }

 - @ref triangle/TriangleExample.cpp

That's all, now we can compile the whole example using CMake. First we find
required %Magnum package with %Shaders and GlutApplication component and add
its include dir.

@dontinclude triangle/CMakeLists.txt
@skip find_package
@until include_directories

Then we collect our source files, create our executable and link to %Magnum
libraries.

@skip add_executable
@until MAGNUM_GLUTAPPLICATION_LIBRARIES})

- @ref triangle/CMakeLists.txt

- Next example: @ref examples-textured-triangle

*/
}
